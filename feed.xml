<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>r7kamura.com</title>
  <link rel="self" type="application/atom+xml" href="https://r7kamura.com/feed.xml"/>
  <link rel="alternate" type="text/html" href="https://r7kamura.com/"/>
  <updated>2020-09-23T22:40:23+00:00</updated>
  <author>
    <name>Ryo Nakamura</name>
  </author>
  <id>tag:r7kamura.com,2019:/</id>
  
    <entry>
      <title>グローバルヘッダーとトップページの微調整</title>
      <link rel="alternate" type="text/html" href="https://r7kamura.com/articles/2020-09-24-site-minor-changes"/>
      <id>tag:r7kamura.com,2019:/articles/2020-09-24-site-minor-changes</id>
      <published>2020-09-24T00:00:00+00:00</published>
      <updated>2020-09-23T22:39:45+00:00</updated>
      <content type="html">&lt;p&gt;最近よくこのサイトに手を加えている。最初からそうだったかのように見えていれば、おおよそ成功と言える。&lt;/p&gt;

&lt;h2&gt;グローバルヘッダー&lt;/h2&gt;

&lt;p&gt;グローバルヘッダーを少し変えた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「記事一覧」から「一覧」へ&lt;/li&gt;
&lt;li&gt;「r7kamura」から「r7kamura.com」へ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;記事一覧だと四文字もあって、ここに置くといかついなと前々から感じていた。どうせ記事しかコンテンツがないので、一覧で伝わるに違いない。情報として完全ではないことを恐れていたが、100%の情報を伝えられる語句などそもそも存在しない、という前提に立つことで諦めることができた。&lt;/p&gt;

&lt;p&gt;このサイト上ではr7kamuraは人物の名前であるということしか説明していないので、左上にr7kamuraとか書いているのはおかしい。ということで、r7kamura.comというサイト名を左上に置くことにした。そもそも、「このサイトはr7kamura.comという名前です」と説明はしていないし、そう名付けた訳でもないが、title要素とドメインがr7kamura.comであることを基準にそういう前提がつくられるだろうと思い、とりあえずこうした。本当は適切なサイト名があると嬉しい。&lt;/p&gt;

&lt;h2&gt;このサイトについて&lt;/h2&gt;

&lt;p&gt;「このサイトについて」のコンテンツを少し変えた。&lt;/p&gt;

&lt;p&gt;まずウェブサイトという表現をやめてサイトと呼ぶことにした。ウェブサイトの方が完全だが、長い。メールアドレスをアドレスと呼ぶような感覚があるが、いまの気分的にはサイトなのでサイトにした。個人サイトと呼んだときのサイトの語感が気に入っている。&lt;/p&gt;

&lt;p&gt;「このサイトについて」という専用のページを別途設けるかどうか一度考えたが、トップページで説明されている方が収まりが良いだろうということで、この案は没。&lt;/p&gt;

&lt;p&gt;これまでサイトの作者について説明するセクションを設けていたが、サイトの説明に作者名をそれとなく含ませることでこれを取り除いた。経歴を書いたりソーシャルネットワークのアカウントを掲載したりということも特にするつもりはないし、あえてセクションを設けるほどでもない。&lt;/p&gt;

&lt;h2&gt;リンク集&lt;/h2&gt;

&lt;p&gt;新たにリンクというセクションを用意し、これまで個々にセクションを割いていたものをここに押し込むことに成功した。&lt;/p&gt;

&lt;p&gt;将来、他のサイトへのリンクを置きたくなってもひと安心。相互リンク文化も復活させられる。昔は無断リンクという文化があったなと思い出していたら、Wikipediaのページがなかなか面白かったので、&lt;a href=&quot;https://ja.wikipedia.org/wiki/%E7%84%A1%E6%96%AD%E3%83%AA%E3%83%B3%E3%82%AF&quot;&gt;無断リンク&lt;/a&gt;しておく。&lt;/p&gt;

&lt;p&gt;リンクの記述に、dl要素で説明リストを利用してみることにした。順序無しリストだとデフォルトの箇条書きライクなスタイルを打ち消す必要があって面倒だし、その点定義リストのデフォルトスタイルは完全にマッチしていて、用途としても実装としてもほど良さそうに見える。リンク先自体の説明をしている訳ではなく、なぜそのリンクを載せているのかという説明をしてしまっているところが、若干気になってはいる。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>このサイトの実装 2020年版</title>
      <link rel="alternate" type="text/html" href="https://r7kamura.com/articles/2020-09-23-this-site-setup-2020"/>
      <id>tag:r7kamura.com,2019:/articles/2020-09-23-this-site-setup-2020</id>
      <published>2020-09-23T00:00:00+00:00</published>
      <updated>2020-09-23T22:39:45+00:00</updated>
      <content type="html">&lt;p&gt;このサイトの2020年時点での実装のまとめ。振り返り用。&lt;/p&gt;

&lt;h2&gt;ホスティング&lt;/h2&gt;

&lt;p&gt;GitHub Pagesで静的ファイルを配信している。&lt;/p&gt;

&lt;p&gt;当たり前に思うかもしれないが、&lt;code&gt;articles.html&lt;/code&gt; というファイルを配置したときに、&lt;code&gt;/articles.html&lt;/code&gt; だけでなく &lt;code&gt;/articles&lt;/code&gt; というURLでもアクセスできて嬉しい。後者に統一している。&lt;/p&gt;

&lt;p&gt;画像もGitHub Pagesにホスティングしてもらっている。特別にカメラも持っていないし、今のところ枚数も知れている。しかし以下のように制限もあるので、写真が好きな人や、制作物を紹介するポートフォリオのようなものを用意したい場合には少し注意が必要だろう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ファイルあたり100MBの制限&lt;/li&gt;
&lt;li&gt;サイトあたり1GBの制限&lt;/li&gt;
&lt;li&gt;月あたり100GBの帯域幅制限&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;利用する場合は、一度&lt;a href=&quot;https://docs.github.com/ja/github/working-with-github-pages/about-github-pages&quot;&gt;ガイドライン&lt;/a&gt;を読んでおこう。&lt;/p&gt;

&lt;h2&gt;ドメイン&lt;/h2&gt;

&lt;p&gt;Amazon Route53でドメインを管理している。&lt;/p&gt;

&lt;p&gt;このウェブサイトにおいて唯一継続的にお金が掛かっているところでもある。最初の数日だけ &lt;code&gt;r7kamura.github.io&lt;/code&gt; で運営していたこともあったが、試験用途でも無い限り、.comドメインぐらいの価格で済むなら明らかにドメインはあった方が良い。&lt;/p&gt;

&lt;p&gt;ただの記録にも関わらずアドバイス的な形式でわざわざ書いているのは、学生の頃、自分のウェブサイトをつくろうとしたのにドメインを取るのに躊躇してやめた過去があるから。面白半分で良いから、興味があるなら自分にお金を掛けてみるべき。&lt;/p&gt;

&lt;h2&gt;ビルド&lt;/h2&gt;

&lt;p&gt;GitHub Actionsで静的ファイルを自動生成している。&lt;/p&gt;

&lt;p&gt;このウェブサイトは動的なRackアプリケーションとして実装されていて、ビルド毎に全ページのスナップショットが静的ファイルとして出力される、という設計にしている。多分このサイトの実装で一番面白いところだろう。&lt;/p&gt;

&lt;p&gt;この仕組みの良いところの一つは、普段利用しているアプリケーション開発の知識を静的なウェブサイトの開発にも適用できるところ。例えば、Railsを使っても良いし、Hanamiを使ってみても良いし、自分で最強のウェブアプリケーションフレームワークをつくってみるという遊び方をしても良い。&lt;/p&gt;

&lt;h2&gt;デザイン&lt;/h2&gt;

&lt;p&gt;気になったときにHTMLテンプレートやCSSを盆栽のようにいじっている。&lt;/p&gt;

&lt;p&gt;試してみていることを幾つか挙げる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;覚えるべきことを減らす

&lt;ul&gt;
&lt;li&gt;デフォルトを尊重する&lt;/li&gt;
&lt;li&gt;同じスタイルを再利用する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;実装しない

&lt;ul&gt;
&lt;li&gt;ブラウザに任せる&lt;/li&gt;
&lt;li&gt;Googleに任せる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;記事の書き方&lt;/h2&gt;

&lt;p&gt;Markdownベースの何かで記事を書いている。&lt;/p&gt;

&lt;figure&gt;&lt;pre&gt;&lt;code&gt;---
title: このウェブサイトの実装 2020年版
---

このサイトの2020年時点での実装のまとめ。振り返り用。

## ホスティング

GitHub Pagesで静的ファイルを配信している。
&lt;/code&gt;&lt;/pre&gt;
&lt;figcaption&gt;記事のソースコードの例&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;「Markdownベースの何か」に関する話をすると長くなるので、また別の機会に触れたい。&lt;/p&gt;

&lt;p&gt;記事を書いたら、&lt;code&gt;git push&lt;/code&gt; するとよしなにやってくれる。ブラウザでGitHubを開いてエディタで書くこともできる。とはいえ外出時にたまたま気になってiPhoneから編集したことがある程度で、今のところPCのエディタで書くことがほとんど。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>ウェブカメラ、LOST ARK、コードの説明</title>
      <link rel="alternate" type="text/html" href="https://r7kamura.com/articles/2020-09-23-notes"/>
      <id>tag:r7kamura.com,2019:/articles/2020-09-23-notes</id>
      <published>2020-09-23T00:00:00+00:00</published>
      <updated>2020-09-23T22:39:45+00:00</updated>
      <content type="html">&lt;p&gt;雑記のタイトルでは、話題を羅列するというパターンが気に入っている。技術系ポッドキャストの説明文で、似たような表現を見ることが多い。&lt;/p&gt;

&lt;figure&gt;&lt;a href=&quot;/images/2020-09-23-notes-camera.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2020-09-23-notes-camera.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;ウェブカメラとディスプレイ&lt;/figcaption&gt;&lt;/figure&gt;

&lt;h2&gt;ウェブカメラ&lt;/h2&gt;

&lt;p&gt;Google HangoutやZoomでウェブカメラを使う機会も増えてきたので、「ウェブカメラ 最強」で検索して、ロジクールのC980GRというやつを買った。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/B086R71LGW/?tag=r7kamura07-22&quot;&gt;ロジクール ウェブカメラ C980GR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;あまり明るくない部屋でも、顔が明るく映るのが嬉しい。普段ノートPCを閉じたまま使っているので、ミーティングのときだけカメラのために開くのが面倒だったし、メインディスプレイで共有された資料を見たいのにノートPCのカメラに顔を向けなければいけないという問題があった。今のところ一切の不満が無く、買って良かったと思う。&lt;/p&gt;

&lt;p&gt;ちなみに、&lt;a href=&quot;https://r7kamura.com/articles/2020-09-19-anker-usb-hub&quot;&gt;AnkerのUSBハブを買った&lt;/a&gt; で書いたUSBハブは、このウェブカメラを接続するにあたってUSBポートの数が足りなくなったので購入した。&lt;/p&gt;

&lt;h2&gt;LOST ARK&lt;/h2&gt;

&lt;figure&gt;&lt;a href=&quot;/images/2020-09-23-notes-lostark.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2020-09-23-notes-lostark.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;ゲーム内の様子。普段は見下ろし型だがズームするとこうなる&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;韓国で既にリリースされている人気のMMORPG。今日から日本での正式サービスが開始されるということで、少しだけプレイしたのだけど、正直期待していたより自分に合わなかったので残念。FF11やFF14をやりすぎたせいで、先入観が付き、贅沢になりすぎたのかもしれない。&lt;/p&gt;

&lt;p&gt;スキル割り振りのプリセットによるビルドシステムや、ダイナミックに動くカメラワーク、大量の雑魚敵を上手く薙ぎ払う爽快感など、褒めたい要素は沢山あるのだけど、点と点が自分の中で全く噛み合っていないというか、MMORPG的な要素をそれぞれの部署が考えてそれぞれで最善を尽くしましたという感じで、「体験がデザインされている」という期待が感じられなかったのが自分に合わなかったところ。自分の感想は「勿体ない」に尽きる。&lt;/p&gt;

&lt;h2&gt;コードの説明&lt;/h2&gt;

&lt;p&gt;コードを掲載しながら説明するとき、「以下は○○するコードである」と書いて相対参照するより、そのコードのキャプションでその旨を説明するか、コードの名前などを書いて絶対参照する方が良い。そこで、試しにコードブロック記法でキャプションを付けられるようにしてみた。&lt;/p&gt;

&lt;figure&gt;&lt;pre&gt;&lt;code&gt;module Kernel
  alias_method :original_require, :require

  def require(path)
    time = ::Time.now
    original_require(path).tap do
      puts &quot;%3.6f\t#{path}&quot; % (Time.now - time)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;figcaption&gt;requireの処理時間を雑に測定するコード&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;見た目はいい感じ。&lt;/p&gt;

&lt;p&gt;実装方法には全く納得しておらず、キャプション文字列内に空白が入ると動かないとか色々不満はあるが、「コードにキャプションがあると嬉しいか？」を調べるためのプロトタイプとしては十分役割を果たしていると思う。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>記事の説明文</title>
      <link rel="alternate" type="text/html" href="https://r7kamura.com/articles/2020-09-22-markdown-summary"/>
      <id>tag:r7kamura.com,2019:/articles/2020-09-22-markdown-summary</id>
      <published>2020-09-22T00:00:00+00:00</published>
      <updated>2020-09-23T22:39:45+00:00</updated>
      <content type="html">&lt;figure&gt;&lt;a href=&quot;/images/2020-09-22-summary-detection.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2020-09-22-summary-detection.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;何の関係も無いサメのぬいぐるみの画像&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;記事の説明文を抽出する方法を変更した。あまり目に触れる機会は無いが、SNSやフィードなどで利用される。&lt;/p&gt;

&lt;p&gt;これまでは「なるべく記事の先頭の方で要約を置きたい」という背景から「最初に表れるテキストの先頭の一文をその記事の説明文として扱う」という作戦でやっていた。しかし、&lt;a href=&quot;/articles/2020-09-22-markdown-caption&quot;&gt;画像にキャプションを付けられるようにした&lt;/a&gt;おかげで、アイキャッチとして記事の先頭に画像を置き、そこにキャプションが書かれるというケースも今後出てくるはず。そうなるとこの作戦は上手くいかない。&lt;/p&gt;

&lt;p&gt;この記事でも、過去のやり方で失敗する例として、先頭にキャプション付きの画像を配置している。これまでの方法だと、この記事の説明文は以下のようになっていた。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;何の関係も無いサメのぬいぐるみの画像&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;新しい作戦として用意したのは「最初の子がテキストである段落要素の最初の一文をその記事の説明文として扱う」というもの。この方法だと、説明文は以下のようになる。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;記事の説明文を抽出する方法を変更した。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ソースコードの変更は &lt;a href=&quot;https://github.com/r7kamura/r7kamura.com/commit/637bcc8f52db48ab7fd38cbe28ef55d75a2e1ad2&quot;&gt;https://github.com/r7kamura/r7kamura.com/commit/637bcc8f52db48ab7fd38cbe28ef55d75a2e1ad2&lt;/a&gt; のようになった。フィルタの仕組みは、変換だけでなく、メタデータの収集にも利用できる。この手法は、例えば &lt;code&gt;@r7kamura&lt;/code&gt; のように文章内でmentionする機能をつくるときなんかに、mentionをリンクに変換しつつ通知先のアカウント名を収集する、といった感じでよく使われる。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>画像のキャプション</title>
      <link rel="alternate" type="text/html" href="https://r7kamura.com/articles/2020-09-22-markdown-caption"/>
      <id>tag:r7kamura.com,2019:/articles/2020-09-22-markdown-caption</id>
      <published>2020-09-22T00:00:00+00:00</published>
      <updated>2020-09-23T22:39:45+00:00</updated>
      <content type="html">&lt;p&gt;FF14のスクリーンショットを久しぶりに見返していた。&lt;/p&gt;

&lt;figure&gt;&lt;a href=&quot;/images/2020-09-22-markdown-caption-back.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2020-09-22-markdown-caption-back.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;猫耳や尻尾があるミコッテという種族&lt;/figcaption&gt;&lt;/figure&gt;

&lt;figure&gt;&lt;a href=&quot;/images/2020-09-22-markdown-caption-monster.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2020-09-22-markdown-caption-monster.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;山岳エリアに居るサボテンの敵&lt;/figcaption&gt;&lt;/figure&gt;

&lt;figure&gt;&lt;a href=&quot;/images/2020-09-22-markdown-caption-whale.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2020-09-22-markdown-caption-whale.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;移動するときによく乗るクジラ&lt;/figcaption&gt;&lt;/figure&gt;

&lt;figure&gt;&lt;a href=&quot;/images/2020-09-22-markdown-caption-boss.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2020-09-22-markdown-caption-boss.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;めちゃくちゃ大きいボスから味方を守っている&lt;/figcaption&gt;&lt;/figure&gt;

&lt;figure&gt;&lt;a href=&quot;/images/2020-09-22-markdown-caption-namazuo.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2020-09-22-markdown-caption-namazuo.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;人語を話す変な生きもの&lt;/figcaption&gt;&lt;/figure&gt;

&lt;figure&gt;&lt;a href=&quot;/images/2020-09-22-markdown-caption-myroom.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2020-09-22-markdown-caption-myroom.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;ギルドハウス内につくった自室&lt;/figcaption&gt;&lt;/figure&gt;

&lt;figure&gt;&lt;a href=&quot;/images/2020-09-22-markdown-caption-myroom-2.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2020-09-22-markdown-caption-myroom-2.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;疲れて縁側で寝ている&lt;/figcaption&gt;&lt;/figure&gt;

&lt;hr&gt;

&lt;p&gt;この記事を書くにあたり、ソースをMarkdownで書きながらも画像にキャプションを付けられるようにしてみた。画像とテキストだけで構成される段落を見つけたら、テキストをその画像のキャプションとする――という作戦。&lt;/p&gt;

&lt;p&gt;次のような過程で変換されていく。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;吾輩は猫である。名前はまだ無い。

![](/images/cat.jpg)
無名の猫

どこで生まれたかとんと見当がつかぬ。
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;吾輩は猫である。名前はまだ無い。&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
  &amp;lt;a href=&quot;/images/cat.png&quot; target=&quot;_blank&quot;&amp;gt;
    &amp;lt;img src=&quot;/images/cat.png&quot; alt=&quot;&quot;&amp;gt;
  &amp;lt;/a&amp;gt;
  無名の猫
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;どこで生まれたかとんと見当がつかぬ。&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;吾輩は猫である。名前はまだ無い。&amp;lt;/p&amp;gt;

&amp;lt;figure&amp;gt;
  &amp;lt;a href=&quot;/images/cat.png&quot; target=&quot;_blank&quot;&amp;gt;
    &amp;lt;img src=&quot;/images/cat.png&quot; alt=&quot;&quot;&amp;gt;
  &amp;lt;/a&amp;gt;
  &amp;lt;figcaption&amp;gt;無名の猫&amp;lt;/figcaption&amp;gt;
&amp;lt;/figure&amp;gt;

&amp;lt;p&amp;gt;どこで生まれたかとんと見当がつかぬ。&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに、実際のソースコードの変更は &lt;a href=&quot;https://github.com/r7kamura/r7kamura.com/commit/51bf5289add41852c3b393b192e47393fb969133&quot;&gt;https://github.com/r7kamura/r7kamura.com/commit/51bf5289add41852c3b393b192e47393fb969133&lt;/a&gt; のようになった。変換フィルタによる抽象化の仕組みを入れておいたおかげで、やりたいことが簡単に記述できるようになって嬉しい。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>個人サイトについて</title>
      <link rel="alternate" type="text/html" href="https://r7kamura.com/articles/2020-09-21-personal-website"/>
      <id>tag:r7kamura.com,2019:/articles/2020-09-21-personal-website</id>
      <published>2020-09-21T00:00:00+00:00</published>
      <updated>2020-09-23T22:39:45+00:00</updated>
      <content type="html">&lt;p&gt;なぜ個人でウェブサイトを運用しているのかについて、整理しておきたい。&lt;/p&gt;

&lt;p&gt;要約すると、以下の理由でやっている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ウェブの技術を学べて費用対効果が高いから&lt;/li&gt;
&lt;li&gt;表示されるコンテンツを制御したいから&lt;/li&gt;
&lt;li&gt;フィードバックの場と適切な距離を置きたいから&lt;/li&gt;
&lt;li&gt;かっこいいから&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;コスパが高い&lt;/h2&gt;

&lt;p&gt;個人でウェブサイトを持って運用していくことは、学習意欲の高い多くの人にとって費用対効果の高い活動だと思う。&lt;/p&gt;

&lt;p&gt;ほとんどの技術が無料で利用できる時代になってきているので、ここで言う費用というのは時間や労力のことで、効果というのは得られる知識のこと。その仕組みを用意するにあたって、ウェブサイトというものがどういう仕組みで動くかということが、一通り理解できる。この辺の分野を本職とするような人であれば、こういうことは最低限理解しておいてほしいし、何なら採用面接でもこういったことを質問する・される機会がある。&lt;/p&gt;

&lt;p&gt;学習コストについて述べたけれど、経済的なコストパフォーマンスについてもそう。その時代においておおよそモダンとされる一通りの技術を利用してウェブサイトを運用できる程度の能力があれば、ウェブサイト自体がその証左となってくれるし、仕事のアテも比較的簡単に見つけられると思う。それを生業にしたいかどうかについては、また別の話になるだろうけれども。&lt;/p&gt;

&lt;p&gt;一旦ウェブサイトを完成させたら終わりという訳でもない。移り変わりの激しいウェブ技術を継続的に運用していくことは、それだけで技術的にも精神的にも難しく、実践して学ぶ価値がある事柄だと思う。同じものをつくるにしてもやり方は一つではなく、無限の可能性がある。初学者にも熟練者にも居場所があり、学びの場として最高のコンテンツの一つだと思う。&lt;/p&gt;

&lt;h2&gt;表示されるコンテンツを制御したい&lt;/h2&gt;

&lt;p&gt;どこまで個人で用意するかということについて、例えば以下のように考えていくことはできる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ブランドをあまり押し出してこないサービスであれば良いのか&lt;/li&gt;
&lt;li&gt;ドメインさえ自前のものであれば良いのか&lt;/li&gt;
&lt;li&gt;HTMLを完全に書き換えられるようなサービスは良いのか&lt;/li&gt;
&lt;li&gt;静的ファイルをホスティングしてくれるサービスは良いのか&lt;/li&gt;
&lt;li&gt;VPS借りてやるのは良いのか&lt;/li&gt;
&lt;li&gt;論理インフラから構築していく必要があるのか&lt;/li&gt;
&lt;li&gt;自宅に物理サーバ建てる必要があるのか&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;しかし、どこまでいけば個人でやっていると言えるのかというのは曖昧で、これはその時代の技術の発展具合によって変わってくるし、どこまでやっても終わりはない。こういう静的な基準で考えるよりも、方針や信条としてどの方向を向いているかという話で考えた方が良いと思う。&lt;/p&gt;

&lt;p&gt;「表示されるコンテンツが制御可能か」という基準を自分はよく考えている。例えば自分のウェブサイトだと、ソースコードやウェブサイトのホスティングもビルドも全部GitHubにやってもらっているけれど、勝手に広告が出たり、コンテンツの見せ方が変わったり、運営の都合で非公開にさせられたり、他人の文章が自分の書いた文章のすぐ隣に堂々と表示されたりはしないし、他の仕組みに乗り換えることも簡単にできる。公開するコンテンツも、まあ自分が書きたいような内容であれば完全に自由だ。&lt;/p&gt;

&lt;p&gt;サービスが障害で落ちたりすることはあれど、大抵はすぐ元に戻ることが見込まれているし、コンテンツの内容が微妙に書き換わるというものではなく、コンテンツの配信に成功するか失敗するかの二択であるから、これは前述した話とは少し違う話だと思う。サービスが終了したりすることもあるけれど、最悪の場合でも別のサービスに一日もあれば乗り換えられるし、そういう意味だと技術的にロックインされているか、安心感があるかという話にも関わってくるのかもしれない。&lt;/p&gt;

&lt;h2&gt;フィードバックと距離を置きたい&lt;/h2&gt;

&lt;p&gt;文章を書くときに、いいね中毒や、批判への恐怖に晒されたくないという気持ちがある。そういったものが滲み出た文章は、読むのも書くのも好きではない。他者からのフィードバックと適切に距離を置くことで、この気持ちは抑制できる。&lt;/p&gt;

&lt;p&gt;文章の方向性として、内に向いたものか、外に向いたものかという話があると思う。要は主に自分のために書いているが他人が見てくれても構わないという体裁で書いたものか、外部の多くの人に読んでもらいたいという気持ちで書いたものかという、書く時のスタンスの話。&lt;/p&gt;

&lt;p&gt;自分は、個人の書いたもので言えば、内向きに書いたものの方が読みたいと思うし、そういうものを書きたいとも思う。内向きに書いたものの方が、外部からの影響を受けず、ある意味その人の純粋な考えをより反映したものになって、多様性や希少価値が出て面白い。技術情報についても、そもそも技術情報ではまず一次情報をあたるべきだし、もし個人の書いた二次情報を見るのだとしても、内向きに書かれたものの方がやはり信頼性が高く、貴重な情報が多いと感じる。&lt;/p&gt;

&lt;p&gt;なぜ個人の外向きの文章が好きではないかというと、その性質上フィードバックを受けやすく、結果的に出力されるものが外部からの影響を受けたものになりやすいからだと思う。&lt;/p&gt;

&lt;p&gt;外の人が気持ちよく読めるような内容にしたい、という気持ち自体は嫌いではない。しかし、そのためには外の人の気持ちを理解して、内容に取り入れる必要がある。手っ取り早い方法として、いいねやブックマークの数を指標とする方法がある。いいねが沢山付いて、人気が出ると嬉しい。しかし、これは甘美な罠である。気合いを入れて書いた記事をそれとなく共有するとき、内心ではものすごく緊張しており、気付けば通知を無限に更新している自分が居て、期待よりいいねが付かないと落胆する。いいね中毒になると、いいねの付きそうな記事だけを書くようになり、逆にいいねの付きそうにない記事は書けなくなってしまう。これが本当に自分の書きたいものだったのだろうか。&lt;/p&gt;

&lt;p&gt;褒めるフィードバックだけではなく、貶（けな）すフィードバックもある。インターネットでは、心無い誰かが匿名で暴論を吐いてくるということもしばしば起こり得る。こういう体験の多くは心に刺さるもので、一度恐怖に晒されると、次回からは怒られないものを書こうとしてしまう。&lt;/p&gt;

&lt;p&gt;何がいけないのだろうか。思うに、以下の点が良くないのだろうと思う。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;信頼性の無いフィードバックを重視すること&lt;/li&gt;
&lt;li&gt;フィードバックを強く受けすぎること&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;いいねやブックマークは、付ける側はものすごく手軽。他者が書いたものを貶すのも、褒めることに比べるとよほど簡単。こういうものを指標として文章を書くと、平均的な人達が簡単に賛同しやすいものを書いてしまいがちで、正直言って好ましくない。自分にとってウェブがつまらなくなる原因の一つであるとさえ感じる。&lt;/p&gt;

&lt;p&gt;コンテンツそのものと近い位置にこの手のフィードバックを受ける口があると、このフィードバックループが強まりがちになるが、一般的なブログプラットフォームでは、このコンテンツとフィードバックとの距離があまりにも近すぎると思う。自分のコンテンツを載せるページに他人のコメントがリアルタイムに追記されていくとか、他人がボタンを押すと自分の持てるデバイスすべてに通知が来るだとか、そういう機能がデフォルトになったものがあまりにも多い。&lt;/p&gt;

&lt;p&gt;幸い、個人のウェブサイトではこういったものも自分で制御できる。自分は距離を置きたいので、今のところ自分のウェブサイトにソーシャルな窓口は設けていないし、フィードバックが欲しいときだけSNSに共有し、信頼できそうな人の直接的な言及しか参考にしないように気を付けている。一番嬉しいフィードバックは、信頼できる他人の記事内で自分の文章が言及されていて、それに伴って何かが書かれているというケースだと思う。いいねより言及してほしい。&lt;/p&gt;

&lt;h2&gt;かっこよさ&lt;/h2&gt;

&lt;p&gt;結局のところ、それがかっこいいと思うからやっている。&lt;/p&gt;

&lt;p&gt;長々とゴタクを述べたが、突き詰めて考えると結論はこうだ。周りの目を気にしながら文章を書いて、知らない誰かのサービスに預けて、よく分からない仕組みで公開されて、たまに見た目が変わったりして、いろんな情報が周りにベタベタ並んでいて、それでかっこいいと思うか？&lt;/p&gt;

&lt;p&gt;それで良いと思う人もいると思う。「お前がそう思うんならそうなんだろう、お前の中ではな」だ。自分の信じる最高のサービスにコンテンツを預けて、自分は文章を書くことに集中できる。それもまた理想だ。むしろ、自分もそう思いたかったとさえ感じる。&lt;/p&gt;

&lt;p&gt;多くの人にとって、ウェブの技術は魔法だ。少し指を動かすだけで、世界中の人に自分の声を届けられる。しかし自分にとって、ウェブの技術はもはや魔法ではない。知ってしまった以上、使いこなしたいと思うのが人の性というもの。もちろん、他の人には強要しない。技術者としては、出来る限り、他の人の中ではそれが魔法であってほしいと思う。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>PCデスクの機器と配線の計画</title>
      <link rel="alternate" type="text/html" href="https://r7kamura.com/articles/2020-09-21-cable-dependencies"/>
      <id>tag:r7kamura.com,2019:/articles/2020-09-21-cable-dependencies</id>
      <published>2020-09-21T00:00:00+00:00</published>
      <updated>2020-09-23T22:39:45+00:00</updated>
      <content type="html">&lt;p&gt;PCデスクを買い換えることにしたので、機器と配線について整理する。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2020-09-21-cable-dependencies.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2020-09-21-cable-dependencies.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;機器&lt;/h2&gt;

&lt;p&gt;PCデスク周りに現状置いてるものを並べてみる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;デスクトップPC&lt;/li&gt;
&lt;li&gt;MacBook Pro&lt;/li&gt;
&lt;li&gt;マウスパッド1&lt;/li&gt;
&lt;li&gt;マウスパッド2&lt;/li&gt;
&lt;li&gt;無線ヘッドホンアンプ&lt;/li&gt;
&lt;li&gt;USBオーディオインターフェース&lt;/li&gt;
&lt;li&gt;USBマイク&lt;/li&gt;
&lt;li&gt;USBハブ&lt;/li&gt;
&lt;li&gt;USB充電器&lt;/li&gt;
&lt;li&gt;キーボード&lt;/li&gt;
&lt;li&gt;ルーター&lt;/li&gt;
&lt;li&gt;ディスプレイ1&lt;/li&gt;
&lt;li&gt;ディスプレイ2&lt;/li&gt;
&lt;li&gt;クリップライト1&lt;/li&gt;
&lt;li&gt;クリップライト2&lt;/li&gt;
&lt;li&gt;スピーカー&lt;/li&gt;
&lt;li&gt;Webカメラ&lt;/li&gt;
&lt;li&gt;Hueブリッジ&lt;/li&gt;
&lt;li&gt;キャプチャボード&lt;/li&gt;
&lt;li&gt;HDMIセレクタ&lt;/li&gt;
&lt;li&gt;Nintendo Switch&lt;/li&gt;
&lt;li&gt;Nintendo Switch Proコントローラー&lt;/li&gt;
&lt;li&gt;PS4&lt;/li&gt;
&lt;li&gt;PS4 コントローラー&lt;/li&gt;
&lt;li&gt;無線ヘッドホン&lt;/li&gt;
&lt;li&gt;有線ヘッドホン&lt;/li&gt;
&lt;li&gt;iPad Pro&lt;/li&gt;
&lt;li&gt;iPhone&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;うわあ多い。しかし機器の個数が無限ではないことが分かって安心。&lt;/p&gt;

&lt;h2&gt;電源タップ&lt;/h2&gt;

&lt;p&gt;合計14個の電源が必要になる。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;机の天板の裏面に貼り付けられる形状 (重量と接地面の制約)&lt;/li&gt;
&lt;li&gt;黒色&lt;/li&gt;
&lt;li&gt;ケーブル長2m&lt;/li&gt;
&lt;li&gt;物理スイッチ無し (使わないし事故が怖いから)&lt;/li&gt;
&lt;li&gt;ACアダプタが衝突しにくいやつ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上の条件を満たす電源タップを考えたところ、エレコムの6個口のやつをデスクの左右裏面に合計3つ配置するのが良さそうということに。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/B01MU9YGSD/?tag=r7kamura07-22&quot;&gt;エレコム 電源タップ T-NSLK-2610BK&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;電源タップなどの操作しない機器は、デスク下に配線トレーを付けて収納する。金網よりもメッシュタイプの方が良さそうなので、これを利用する。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/B01N6B5ST9/?tag=r7kamura07-22&quot;&gt;サンワサプライ ケーブル配線トレー CB-CT5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;配線トレーに入れるには大きすぎるものについては、デスクの裏面にマグネットシートで貼り付ける。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/B0012R2OIQ/?tag=r7kamura07-22&quot;&gt;コクヨ マグネットシート マク-S340&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;USB給電&lt;/h2&gt;

&lt;p&gt;コントローラや無線ヘッドホンなど、USBで給電したい機器が5つあるので、いま持っているAnkerのこれを使う。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/B072KBG9W4/?tag=r7kamura07-22&quot;&gt;Anker 充電器 AK-A2056511&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;マグネット式で接続できるやつが便利なので、この辺のアダプタ類を使う。正直平型より丸形の方が構造的に刺しやすそうだし、買い替えを検討してみている。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/B077PRD1FT/?tag=r7kamura07-22&quot;&gt;ZRSE マグネット式充電アダプタ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;iPad Proは気難しく、充電できない製品が多いが、この製品では使える。接続時に照明が光らないので、本当に接続できてるのかどうか不安なところが不満だけど、iPad Proで使えるというだけで嬉しい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/B07GGCSV45/?tag=r7kamura07-22&quot;&gt;Stouchi マグネット式充電アダプタ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;iPhoneは&lt;a href=&quot;http://localhost:9292/articles/2018-10-31-iphone-xs-max-cb840d595fae&quot;&gt;2年ほど前から&lt;/a&gt;ロジクールの白い充電スタンドをベッドサイドで使っていて、安定感があるし充電量的にも寝るときだけ充電する問題は無いのだけど、デスクでもiPhoneの定位置が欲しいので新しいのを買うかも。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/B07QB62131/?tag=r7kamura07-22&quot;&gt;ロジクール 無線充電スタンド iD20WH&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;参考情報&lt;/h2&gt;

&lt;p&gt;Go Andoさんという方が &lt;a href=&quot;https://note.com/goando/m/me3ed2026f6ac&quot;&gt;デスクをすっきりさせるマガジン&lt;/a&gt; というページで関連記事をまとめてくださっている。デスク周りの配線についての知見が詰まっている、おすすめの情報源。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>RSpecから不要なtypeを取り除く</title>
      <link rel="alternate" type="text/html" href="https://r7kamura.com/articles/2020-09-20-rspec-type-metadata"/>
      <id>tag:r7kamura.com,2019:/articles/2020-09-20-rspec-type-metadata</id>
      <published>2020-09-20T00:00:00+00:00</published>
      <updated>2020-09-23T22:39:45+00:00</updated>
      <content type="html">&lt;p&gt;&lt;code&gt;config.infer_spec_type_from_file_location!&lt;/code&gt; を指定することで不要になる &lt;code&gt;metadata[:type]&lt;/code&gt; を取り除こうというスクリプト。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;require &#39;pathname&#39;

%w[
  api spec/requests
  controller spec/controllers
  feature spec/features
  helper spec/helpers
  integration spec/requests
  job spec/jobs
  mailer spec/mailers
  model spec/models
  request spec/requests
  routing spec/routing
  system spec/system
  view spec/views
].each_slice(2) do |type, directory_path|
  Pathname.glob(&quot;#{directory_path}/**/*_spec.rb&quot;).each do |pathname|
    pathname.write(
      pathname.read.gsub(/, type: :#{type}/, &#39;&#39;)
    )
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sedを使いながらシェルスクリプトで書いても良かったけど、RSpecで書かれたコードということで対象読者的にRubyで書くことに。&lt;/p&gt;

&lt;p&gt;以下は不要な &lt;code&gt;metadata[:type]&lt;/code&gt; の例。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;# spec/models/user_spec.rb
RSpec.describe User, type: :model do
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のように置換される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;# spec/models/user_spec.rb
RSpec.describe User do
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;p&gt;RSpecのディレクトリ構成に関するドキュメントは以下から。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://relishapp.com/rspec/rspec-rails/docs/directory-structure&quot;&gt;https://relishapp.com/rspec/rspec-rails/docs/directory-structure&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;typeとディレクトリパスの対応関係の定義は以下から。&lt;code&gt;|&lt;/code&gt; を使って1つのStringに構造を詰め込んでいるところが正直言ってダサいと思う。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rspec/rspec-rails/blob/e5cbfde4635fca69f9fe0cafc4df7a075a4ce990/lib/rspec/rails/configuration.rb#L25-L40&quot;&gt;https://github.com/rspec/rspec-rails/blob/e5cbfde4635fca69f9fe0cafc4df7a075a4ce990/lib/rspec/rails/configuration.rb#L25-L40&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>最近のRails関係の仕事内容</title>
      <link rel="alternate" type="text/html" href="https://r7kamura.com/articles/2020-09-20-restospective-past-work"/>
      <id>tag:r7kamura.com,2019:/articles/2020-09-20-restospective-past-work</id>
      <published>2020-09-20T00:00:00+00:00</published>
      <updated>2020-09-23T22:39:45+00:00</updated>
      <content type="html">&lt;p&gt;RubyやRailsのアップグレードを主なマイルストーンとしつつ全体的に開発体験を良くしていくというタイプの仕事を請けることが多いのですが、仕事を依頼する側の視点に立ってみると「実際のところ業務に参加するとどういうことが行われるのか？」というのがやはり気になると思います。&lt;/p&gt;

&lt;p&gt;実際、最近の打ち合わせでもその手の不安について相談されることがあったので、ここ1ヶ月でそれ系の仕事で出したPull Requestを元に、実際に何をやっていたかの例を挙げてみたいと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;開発環境構築手順や説明方法の改善&lt;/li&gt;
&lt;li&gt;荒れたRuboCopの改善&lt;/li&gt;
&lt;li&gt;.rubocop.ymlからTargetRailsVersionを取り除く&lt;/li&gt;
&lt;li&gt;DEPRECATION WARNING対応いろいろ&lt;/li&gt;
&lt;li&gt;既存のメソッドと名前が被っているスコープを別名に変更&lt;/li&gt;
&lt;li&gt;RSpecのpositional-argumentsを置換&lt;/li&gt;
&lt;li&gt;activerecord-importでTIME型のカラムにはStringを避ける&lt;/li&gt;
&lt;li&gt;ApplicationControllerとApplicationRecordを用意&lt;/li&gt;
&lt;li&gt;テストではconfig.active_job.queue_adapterを:inlineに&lt;/li&gt;
&lt;li&gt;image_tagにnilを渡さない&lt;/li&gt;
&lt;li&gt;renderの古いオプションを置換&lt;/li&gt;
&lt;li&gt;uniqをdistinctに&lt;/li&gt;
&lt;li&gt;条件付きdestroy_allをwhereで代替&lt;/li&gt;
&lt;li&gt;not_to + raise_errorで例外クラス指定を除去&lt;/li&gt;
&lt;li&gt;paramsに.to_h.with_indifferent_accessを&lt;/li&gt;
&lt;li&gt;feature-specでDB connectionを共有するハックをやめる&lt;/li&gt;
&lt;li&gt;mailerで使われている_pathを_urlに置換&lt;/li&gt;
&lt;li&gt;success?をsuccessful?に置換&lt;/li&gt;
&lt;li&gt;ActiveModel::Dirtyの変更に対応&lt;/li&gt;
&lt;li&gt;UniquenessValidatorにcase_sensitivityを付ける&lt;/li&gt;
&lt;li&gt;if/unlessオプションのString指定をやめる&lt;/li&gt;
&lt;li&gt;gem groupの最適化&lt;/li&gt;
&lt;li&gt;Gemfileの並び替え&lt;/li&gt;
&lt;li&gt;Gemfileのrequireオプションの最適化&lt;/li&gt;
&lt;li&gt;CIでのbundle installのオプション最適化&lt;/li&gt;
&lt;li&gt;eager_load_pathsの最適化&lt;/li&gt;
&lt;li&gt;timecop gemの廃止&lt;/li&gt;
&lt;li&gt;不要なgemの除去&lt;/li&gt;
&lt;li&gt;RSpecの設定の最適化&lt;/li&gt;
&lt;li&gt;CircleCIへの移行&lt;/li&gt;
&lt;li&gt;テスト環境でのshow_exceptionsの有効化&lt;/li&gt;
&lt;li&gt;where.notの互換性対応&lt;/li&gt;
&lt;li&gt;.rubocop_todo.ymlへの全対応&lt;/li&gt;
&lt;li&gt;不要なルーティングの除去&lt;/li&gt;
&lt;li&gt;bootsnapの導入&lt;/li&gt;
&lt;li&gt;テストされていないエンドポイントへのrequest-specの追加&lt;/li&gt;
&lt;li&gt;CIのRSpecのログから標準出力を除去&lt;/li&gt;
&lt;li&gt;たまに失敗するテストに対応&lt;/li&gt;
&lt;li&gt;redirect_backの互換性対応&lt;/li&gt;
&lt;li&gt;CIでyarn installに--prefer-offlineを付ける&lt;/li&gt;
&lt;li&gt;CIのキャッシュキーの最適化&lt;/li&gt;
&lt;li&gt;Docker環境向けのdata-volumeの最適化&lt;/li&gt;
&lt;li&gt;jbuilderからas_jsonベースの単純なJSON生成の仕組みへ移行&lt;/li&gt;
&lt;li&gt;各種gemの最新化&lt;/li&gt;
&lt;li&gt;Zeitwerk対応&lt;/li&gt;
&lt;li&gt;force_ssl有効化&lt;/li&gt;
&lt;li&gt;Ruby 2.6へ移行&lt;/li&gt;
&lt;li&gt;Rails起動時間の削減&lt;/li&gt;
&lt;li&gt;不要なRails.envの廃止&lt;/li&gt;
&lt;li&gt;ファイルの二重読み込み問題に対処&lt;/li&gt;
&lt;li&gt;bin/setupの改善&lt;/li&gt;
&lt;li&gt;ActiveSupport::Concernの良くない使い方に対処&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まあなんかガチャガチャと色々やっていっています。特定のアプリケーションの実装に依存する話 (要はFooモデルのbazメソッドの実装が良くないとか) についてはここに含んでいなくて、実際にはそういうところが一番のホットスポットで改善に効いてくることが多いんですが、そういうのは置いといて汎用性のありそうなタスクだけ抽出してみました。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>「記事」から「記事一覧」に表記を変えた</title>
      <link rel="alternate" type="text/html" href="https://r7kamura.com/articles/2020-09-19-list-articles-minor-change"/>
      <id>tag:r7kamura.com,2019:/articles/2020-09-19-list-articles-minor-change</id>
      <published>2020-09-19T00:00:00+00:00</published>
      <updated>2020-09-23T22:39:45+00:00</updated>
      <content type="html">&lt;p&gt;変更対象は、グローバルヘッダーのリンクと記事一覧ページの見出し。&lt;/p&gt;

&lt;p&gt;「記事」という表記は、記事ではないもの…例えば写真など…が存在していて初めて「記事」という表記である妥当性が生まれるはずで、現状このウェブサイトには記事しかコンテンツが無い。そうであれば、一覧であるということを押し出して「記事一覧」と表記した方が分かりやすいだろう、という意図でこう変更した。&lt;/p&gt;

&lt;p&gt;別案として「過去の記事」という表記も考えた。トップページには「最近の記事」として直近5件の記事を載せているので、ここと対称性を持たせてはどうかという案。しかしこうすると、ある記事に関するパンくずリストを考えたときに、次のような構造になってしまう。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;トップページ&lt;/li&gt;
&lt;li&gt;過去の記事&lt;/li&gt;
&lt;li&gt;その記事&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;そうなると、「記事」が「過去の記事」に包含される、という構造はあまりよろしくないし、やはり「記事一覧」が良いのではと考えた。&lt;/p&gt;

&lt;p&gt;英語だと &quot;articles&quot; で済むので良いけれど、日本語だとなかなか表記が難しい。これまでの「記事」「検索」という二文字ずつの構成のサイズ感が気に入っていただけに、「記事一覧」というゴツい見た目になってしまったのは少し惜しい気持ちがある。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;他に関連する変更として、記事一覧ページに掲載されていた以下の説明を書き換えた。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;このウェブサイトでは、日々の生活やプログラミングなどに関する、個人的な文章を公開しています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;見返してみると、ここでこのウェブサイトが何であるかについて説明する必要はやはり無い。ここにこの文言を追加したときは頭がおかしくなっていたのだろうか。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;すべての過去記事へのリンクを、最近書かれた順に並べています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;新しい説明はこのようにした。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>AnkerのUSBハブを買った</title>
      <link rel="alternate" type="text/html" href="https://r7kamura.com/articles/2020-09-19-anker-usb-hub"/>
      <id>tag:r7kamura.com,2019:/articles/2020-09-19-anker-usb-hub</id>
      <published>2020-09-19T00:00:00+00:00</published>
      <updated>2020-09-23T22:39:45+00:00</updated>
      <content type="html">&lt;p&gt;&lt;a href=&quot;/images/2020-09-19-anker-usb-hub.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2020-09-19-anker-usb-hub.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;『&lt;a href=&quot;https://www.amazon.co.jp/dp/B087TB7YM7?tag=r7kamura07-22&quot;&gt;Anker PowerExpand 8-in-1 USB-C PD 10Gbps データ ハブ&lt;/a&gt;』を買った。&lt;/p&gt;

&lt;p&gt;MacBook Proへの配線を1つにまとめるために、以下の用途で使っている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;USB Type-Aでコンデンサマイクと繋ぐ&lt;/li&gt;
&lt;li&gt;USB Type-Aでオーディオインターフェースと繋ぐ&lt;/li&gt;
&lt;li&gt;USB Type-CでWebカメラと繋ぐ&lt;/li&gt;
&lt;li&gt;USB Type-Cで給電する&lt;/li&gt;
&lt;li&gt;HDMIで外部ディスプレイと繋ぐ&lt;/li&gt;
&lt;li&gt;Ethernetでルータと繋ぐ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;やりたいことが全部満たせて概ね満足。&lt;/p&gt;

&lt;p&gt;電源周りについての注意点。MacBook Pro 13inch用の純正電源アダプタを使うと、13inchに接続しても電力が足りないのか給電されなかった。たまたま持っていた15inch用の電源アダプタを使ったら上手くいった。15Wがハブへの給電に利用されると書いてあるので、余裕のある電源アダプタじゃないと駄目みたい。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;ところで、これはこのUSBハブの話とは全く関係無い話なのだけど、電源アダプタ、ミキサー、USBマイクに繋いだMacBook Proからアナログ音声出力を取ろうとすると、自分の環境だとうるさいくらいのノイズが乗ってしまうという問題に遭遇した。&lt;/p&gt;

&lt;p&gt;調査を進めた結果、2つのPC間でマイクとミキサーを経由してグラウンドループが発生していることが判明。過去にもたまに同じ問題に遭遇することがあって不思議に思っていたけど、原因がようやく判明してスッキリ。&lt;/p&gt;

&lt;p&gt;グラウンドループはなかなか気付きづらい問題で、例えばキャプチャーボードに繋いだSwitchから音声をアナログ出力経由で取ろうとすると、同様の問題が起こったりする。解決策としては、経路の一部をアナログ音声からデジタル音声経由に変えたり、音質が多少損なわれても良い場合はグラウンドループ・アイソレーターを間に挟んだりする方法がある。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>記事内の画像にリンクを付けた</title>
      <link rel="alternate" type="text/html" href="https://r7kamura.com/articles/2020-09-18-link-image"/>
      <id>tag:r7kamura.com,2019:/articles/2020-09-18-link-image</id>
      <published>2020-09-18T00:00:00+00:00</published>
      <updated>2020-09-23T22:39:45+00:00</updated>
      <content type="html">&lt;p&gt;これで画像をクリックすると大きく表示できるようになった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2020-09-18-link-image.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2020-09-18-link-image.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;特に脈絡の無いサメのぬいぐるみの画像。&lt;/p&gt;

&lt;h2&gt;仕組み&lt;/h2&gt;

&lt;p&gt;もともとこのウェブサイトの記事本文のHTMLは、Markdownで書かれた文字列をHTML形式の木構造に変換し、それをまた文字列に変換する、という方法で生成されていた。今回はこの処理の途中に少し手を加え、木構造に含まれるimg要素をa要素で囲む、という処理を加えることにした。&lt;/p&gt;

&lt;p&gt;具体的には、木構造に変換フィルター群を適用して別の木構造にしていく、というパターンで実装している。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/r7kamura/r7kamura.com/pull/11&quot;&gt;https://github.com/r7kamura/r7kamura.com/pull/11&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;思い出&lt;/h2&gt;

&lt;p&gt;こういうのは独自記法を実装するときの常套手段で、例えばQiitaやQiita:TeamのMarkdownパーサーなんかも同じ仕組みで実装されている。&lt;/p&gt;

&lt;p&gt;当時、emojiやmention、他の記事への言及、外部リンク、シンタックスハイライトやタスクリストなど、Markdownパーサの仕事は日に日に増えつつあり、この要求に耐え得るべく2014年頃に自分が実装し直したものがこれで、今でもまだ元気に動いているはず。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/increments/qiita-markdown&quot;&gt;https://github.com/increments/qiita-markdown&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>何も書かれていないテストファイルを消す</title>
      <link rel="alternate" type="text/html" href="https://r7kamura.com/articles/2020-09-17-empty-test-files"/>
      <id>tag:r7kamura.com,2019:/articles/2020-09-17-empty-test-files</id>
      <published>2020-09-17T00:00:00+00:00</published>
      <updated>2020-09-23T22:39:45+00:00</updated>
      <content type="html">&lt;p&gt;雑なスクリプトを書いて空のテストファイルを消したという話。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;pathname&#39;

Pathname.glob(&#39;spec/**/*_spec.rb&#39;).each do |pathname|
  if pathname.each_line.count &amp;lt; 10 &amp;amp;&amp;amp; !pathname.read.match?(/\bit\b/)
    puts pathname
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;特にRailsのようなomakaseを志向したフレームワークなんかは、ファイルジェネレーターの支援が手厚く、モデルなんかをつくろうとしたときに自動的に実装とテストファイルの雛形を自動生成してくれたりする。そういうものを気にせず放置していると、何も定義されていない空のファイルが大量に溜まっていったりするので、気を付けていないとたまにこういう活動が必要になる。&lt;/p&gt;

&lt;p&gt;rubocop-rspecのRSpec/EmptyExampleGroupというCopでもこういうものは検知できると思う。このプロジェクトでは現在たまたまそれをすぐに利用できる状態に無かったので、雑に解決してしまった。rubocop-rspecについて言うと、無の状態から導入を提案しても合意が取れない可能性が高いので、この手の問題を見つけたときに「ね、こんな問題が解決できるでしょう」という体で提案するのが良いと思います。政治の話をしてしまったかもしれない。&lt;/p&gt;

&lt;p&gt;汎用的なアンチパターンのあるある話だと思ったので、記事に書いておくことにした。またこういう話が出てきたら、適当な粒度で記事にまとめて雑に書いていきたい。こういうツッコミどころの多い文章は、匿名の人々による批判に合いやすく、なかなか書きにくいのだけど、助言の流布ではなく個人の記録という体裁を保つことで、気にせず書いていけたらと良いと思う。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>光る大きいマウスパッドを買った</title>
      <link rel="alternate" type="text/html" href="https://r7kamura.com/articles/2020-09-16-gaming-mouse-pad"/>
      <id>tag:r7kamura.com,2019:/articles/2020-09-16-gaming-mouse-pad</id>
      <published>2020-09-16T00:00:00+00:00</published>
      <updated>2020-09-23T22:39:45+00:00</updated>
      <content type="html">&lt;p&gt;Razerの&lt;a href=&quot;https://www.amazon.co.jp/dp/B07JJ4RG2T/r7kamura07-22&quot;&gt;Goliathus Chroma Extended&lt;/a&gt;というマウスパッドを買った。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2020-09-16-gaming-mouse-pad-light.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2020-09-16-gaming-mouse-pad-light.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;素材がそこそこ柔らかくて、パームレストを置かなくても手首への負担が少し減って嬉しい。ここにキーボードとマウスを置く、という位置取りがはっきりしたことで、何となく収まりが良くなった気がする。何も無いだだっ広い机より、趣があって良いね。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2020-09-16-gaming-mouse-pad.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2020-09-16-gaming-mouse-pad.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;「光る意味ある？」と最初は思ってて、冗談で買ったんだけど、暗い部屋で使ってみたら結構アガるし、買って良かった。雰囲気はだいぶ良いんだけど、スマホで暗い部屋の様子が上手く撮影できなくて、上の写真では良さが伝わりづらくなってしまったかも。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>文字とコードブロックの色を変えた</title>
      <link rel="alternate" type="text/html" href="https://r7kamura.com/articles/2020-09-16-color-change"/>
      <id>tag:r7kamura.com,2019:/articles/2020-09-16-color-change</id>
      <published>2020-09-16T00:00:00+00:00</published>
      <updated>2020-09-23T22:39:45+00:00</updated>
      <content type="html">&lt;p&gt;&lt;a href=&quot;/images/2020-09-16-color-change.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2020-09-16-color-change.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;コントラストが高すぎてどぎつい感じがしてきたので、テキストの色を &lt;code&gt;#111111&lt;/code&gt; から &lt;code&gt;#333333&lt;/code&gt; に変更した。&lt;/p&gt;

&lt;p&gt;それから、コードブロックが読みにくいと思ったので黒背景に変更。インラインのcode要素はそのまま。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>新しいマイクスタンドを買った</title>
      <link rel="alternate" type="text/html" href="https://r7kamura.com/articles/2020-09-16-blue-microphones-compass"/>
      <id>tag:r7kamura.com,2019:/articles/2020-09-16-blue-microphones-compass</id>
      <published>2020-09-16T00:00:00+00:00</published>
      <updated>2020-09-23T22:39:45+00:00</updated>
      <content type="html">&lt;p&gt;&lt;a href=&quot;/images/2020-09-16-blue-microphones-compass.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2020-09-16-blue-microphones-compass.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Blue MicrophonesのCompassというマイクスタンドを購入して取り付けた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.bluemic.com/ja-jp/products/compass/&quot;&gt;https://www.bluemic.com/ja-jp/products/compass/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使わないときに回転させて端の方に追いやっておく…という操作がやりやすく、そういうことをしてもしっかりと角度が保存されている。本体の中に深めのケーブルガイドがあるのも地味に嬉しいところ。&lt;/p&gt;

&lt;p&gt;前まで使っていたものは、どうしてもYetiの重量に耐え切れず、良い感じの角度で止まらないことが多かった。それでも工夫すれば普通に使えてはいたので、前のやつもそこまで悪くはなかったと思う。今はヘッドホンスタンドとして第二の人生を歩み始めてもらっている。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Terraria Pirate Map AFK Farm</title>
      <link rel="alternate" type="text/html" href="https://r7kamura.com/articles/2020-09-13-terraria"/>
      <id>tag:r7kamura.com,2019:/articles/2020-09-13-terraria</id>
      <published>2020-09-13T00:00:00+00:00</published>
      <updated>2020-09-23T22:39:45+00:00</updated>
      <content type="html">&lt;p&gt;Terrariaで&lt;a href=&quot;https://terraria.gamepedia.com/Pirate_Map&quot;&gt;Pirate Map&lt;/a&gt;を放置しながら集めるための狩場について。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2020-09-13-terraria.png&quot;&gt;&lt;img src=&quot;/images/2020-09-13-terraria.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/Terraria/comments/gr6a6i/14_i_made_a_new_afk_arapaima_pirate_map_farm/&quot;&gt;https://www.reddit.com/r/Terraria/comments/gr6a6i/14_i_made_a_new_afk_arapaima_pirate_map_farm/&lt;/a&gt; で紹介されていた方法を真似してみたら上手くいったので、実装で理解できたところについて、後続用にメモを残しておく。ちなみに検証時のバージョンは1.4.0。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;そもそもPirate MapはPirate Invasionというイベントを起こすために必要なアイテムで、Pirate Invasionでは低確率で貴重なアイテムが入手できるため、このイベントは何度も起こす価値がある。そのためにはPirate Mapを沢山集めないといけない。&lt;/p&gt;

&lt;p&gt;しかしPirate Mapのドロップ条件は「Oceanで敵を倒したときに1%の確率でドロップ」というものなので、OceanでPirate Invasionを発生させるようにすれば、少し運が良ければ大体無限に続けられる。なので、狩場をつくってまで何個も集める必要は無いのでは、と最初は思っていた。&lt;/p&gt;

&lt;p&gt;しかししかし、実はPirate Mapの狩場は、Lucky Coinを利用してお金を荒稼ぎする狩場としても再利用できる。そしてLucky CoinはPirate Invasion中に低確率でドロップするアイテムなので、この狩場とシナジーがある。この狩場があると嬉しいのは、そういう背景から。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Terrariaでは、プレイヤーを中心とした168×94タイルの壁またはブロックが無いところに敵が発生する。そのため、狩場をつくるときは最低でもそのくらいの広い空間を用意する。また、見えない部分にもこの範囲内であれば敵が湧いてしまうので、地下の空間等もブロックで埋めておくことが望ましい。この辺の基本的な情報は &lt;a href=&quot;https://terraria.gamepedia.com/Guide:Enemy_farming#Farming_Area&quot;&gt;https://terraria.gamepedia.com/Guide:Enemy_farming#Farming_Area&lt;/a&gt; を読むのが分かりやすい。&lt;/p&gt;

&lt;p&gt;今回はOceanなので、画面端の方で海底を掘ったり埋めたりしていい感じに平坦な空間を用意することになる。ちなみに砂を掘るときは、最序盤から手に入る超絶便利ツール &lt;a href=&quot;https://terraria.gamepedia.com/Gravedigger%27s_Shovel&quot;&gt;Gravedigger&#39;s Shovel&lt;/a&gt; を使うと効率がとても良い。&lt;/p&gt;

&lt;p&gt;近くにNPCが居ると敵が湧きづらくなってしまうので、狩場の近くにNPCは配置しない。&lt;/p&gt;

&lt;p&gt;ダンジョンで見つかる&lt;a href=&quot;https://terraria.gamepedia.com/Water_Candle&quot;&gt;Water Candle&lt;/a&gt;を近くに配置すると、敵がよく湧いて効率が良くなる。他に、Heart LanternやCampfireなんかがあると、体力自動回復効果が促進されて事故が起こりにくくなる。Wrathなんかは壁を貫通して襲ってくるので、基本的に召喚装備で対応するのだけど、他の敵の対処で忙しいと倒し切る前に攻撃されることもある。&lt;/p&gt;

&lt;p&gt;水中の敵は、自分が水中に居て、かつ視界が通っているときにしか寄ってこない。しかし水中では呼吸が出来なくて死んでしまうし、直接敵が寄ってこられる経路があると放置してると死んでしまう。よって、水面に軽く触れる程度のところに立ち、敵が通れないながらも視界は通る程度の穴を開けておくのが望ましい。&lt;/p&gt;

&lt;p&gt;Party Girlが売ってくれるBubbleを使うと、プレイヤーや敵が通過することが出来るが、水没はしないという空間をつくることができる。この性質を利用すると、今回のように海底にゾンビ対策用の溶岩を敷いたり、魚を水中に閉じ込めるための空間を用意したりできる。魚のジャンプ力は低いので、この程度の高さがあれば下から攻撃されることはない。&lt;/p&gt;

&lt;p&gt;既に水があるところにBubbleを埋め込むようにして配置しても上手くいかないので、予め適当なブロックで真空状態をつくってバケツか何かで内部の水を抜いたあとでBubbleを配置するという手間は必要になると思う。&lt;/p&gt;

&lt;p&gt;今回狙う&lt;a href=&quot;https://terraria.gamepedia.com/Arapaima&quot;&gt;Arapaima&lt;/a&gt;という魚の敵はジャングルバイオームにしか沸かないので、付近に140タイル分のジャングル用ブロックを設置してジャングル化させる。ちなみにこのブロックは、繋がったMud BlockにJungle Grass Seedを適当に植えることで生成できる。&lt;/p&gt;

&lt;p&gt;今回自分はHardmode突入直後を想定して実装することにしたので、紹介されているものと違い、Teleportが用意されていない。また、Templeにはまだ行けないのでトラップもDart Trapしか使えない。なので、敵は召喚装備で倒すことになる。そうなると敵が勝手に遠くで倒されてしまうことになるので、放置ではなかなかドロップアイテムが集まりにくかったりする。強いトラップを入手すれば将来的に解決できる問題ではある。&lt;/p&gt;

&lt;p&gt;今回の設計だと、近くで倒してもアイテムが拾えない範囲が出てくるので、Treasure Magnetを装備するのが望ましい。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Mac 標準 動画 サイズ変更 最強</title>
      <link rel="alternate" type="text/html" href="https://r7kamura.com/articles/2020-09-13-mac-movie-edit"/>
      <id>tag:r7kamura.com,2019:/articles/2020-09-13-mac-movie-edit</id>
      <published>2020-09-13T00:00:00+00:00</published>
      <updated>2020-09-23T22:39:45+00:00</updated>
      <content type="html">&lt;p&gt;iMovieの話。&lt;/p&gt;

&lt;p&gt;GeForce Experienceの録画機能で、ゲーム中の動画を録画した。録画された200MBほどの動画ファイルの保存先はDropboxになっており、今はたまたまMacでそのファイルを見ているのだが、これを小さいファイルサイズの動画にしてDiscordに貼り付けたい。&lt;/p&gt;

&lt;p&gt;こういうのは新規にフリーソフトを入れる方法を覚えるより、標準の状態でやる方法を覚える方が役に立つことが多い。そこで「Mac 標準 動画 サイズ変更 最強」みたいなキーワードで調べた結果、Macで最初から入っているiMovieがこの用途に適していそうということが分かった。&lt;/p&gt;

&lt;p&gt;iMovieは「プロジェクト」という単位で各動画を管理しているので、まずプロジェクトを新規作成して、そこに編集したい動画を放り込んで、トリミングしたい場合は適当にやって、ファイルに出力するときにカスタムな品質に設定してファイルサイズを調整する、ということをやると良い。&lt;/p&gt;

&lt;p&gt;ちなみに、Windowsだと標準で付いてるフォトで同様のことができて、これも雑に動画編集する上ではたいへん重宝する。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>ActiveRecord::EnumのI18n</title>
      <link rel="alternate" type="text/html" href="https://r7kamura.com/articles/2020-09-12-activerecord-enum-translation"/>
      <id>tag:r7kamura.com,2019:/articles/2020-09-12-activerecord-enum-translation</id>
      <published>2020-09-12T00:00:00+00:00</published>
      <updated>2020-09-23T22:39:45+00:00</updated>
      <content type="html">&lt;p&gt;ActiveRecordのenumにI18n用の機能を提供するgemをつくった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/r7kamura/activerecord-enum_translation&quot;&gt;https://github.com/r7kamura/activerecord-enum_translation&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;どういうものか&lt;/h2&gt;

&lt;p&gt;Userがenumを利用したstatusというカラムを持っているとすると、I18n用の辞書としてこういう風なデータを用意しておけば…&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;ja:
  activerecord:
    attributes:
      user:
        name: 名前
        status:
          active: 利用中
          inactive: 停止中
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次のようにメソッドを呼び出すことで、翻訳された辞書が利用できるようになる、というやつ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;user.human_enum_name_for(:status) #=&amp;gt; &quot;利用中&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;技術的な難題の解決とかは全く狙っていなくて、どちらかと言うと、この手の仕組みにルールが無くてアプリ内のいろんなところにこれ系のいろんな実装が書かれがちなので、決まりを用意して仕組み化しましょうというのだけを狙って書いてみたところが大きい。&lt;/p&gt;

&lt;h2&gt;ある程度コード量が増えても良いので明示的にやる&lt;/h2&gt;

&lt;p&gt;同じ問題を解決するためのgemとして、昔からenum_helpというものがあるので、これを使っても良い。あとここでは紹介しないけれど似たようなものが幾つかあります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/zmbacker/enum_help&quot;&gt;https://github.com/zmbacker/enum_help&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;解決策としてもちろん知ってはいたのだけれど、個人的にはあまり気に入らなくて、別のものを自作してしまった。せっかくだから、気に入らなかったところなどについて書いてみる。&lt;/p&gt;

&lt;p&gt;例えば、何もしなくても済むようにデフォルトでわりと色々な機能を用意してくれる結果、コード中に足掛かりが何も生まれないところとかは、長年さまざまなRailsアプリの面倒を見てきた結果、かなり嫌いな要素になっている。&lt;/p&gt;

&lt;p&gt;enum_helpも、Railtieを利用して、ActiveRecord::Baseに勝手にmoduleをincludeして、&lt;code&gt;enum&lt;/code&gt; を上書きして、enum利用時に勝手に便利メソッドが追加で生える…という、まあRails用のプラグインとしてはよくある仕組みで実装されているのだけど、できる限りこういうのも明示的にやりたい。&lt;/p&gt;

&lt;p&gt;ライブラリ側はmoduleを提供するので、ユーザにはそれをincludeしてもらって、includeするということはインスタンスメソッドが提供されるということが想定できて、想定通り単純で素直なインスタンスメソッドが提供される。それも何かマジカルな仕組みで動的に定義されたメソッドとかではなく普通のものが提供される。そういう単純な感じであってほしい。&lt;/p&gt;

&lt;p&gt;とはいえ便利なメソッドが動的に定義される方が便利やん、という意見があり、例えば前述のコードは以下のように引数の不要な形で書けるともっと嬉しい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;user.human_enum_name_for_status #=&amp;gt; &quot;利用中&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回書いたやつでは、こういうのが欲しいときは &lt;code&gt;human_enum_reader_for&lt;/code&gt; というメソッドでわざわざ宣言させるようにしている。まあこの特異メソッドが呼び出せるようにするために、結局include時に若干マジカルなことをしてはいるんだけども。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ApplicationRecord
  enum status: %i[active inactive]
  human_enum_reader_for :status
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こういう風に明示的にしておくと何が良いかというと、例えばこの機能から撤退しようということになったときに、「アプリ内の全てのこの機能について使われてるかどうか調べなきゃいけないじゃん……ほぼ無理だろ……」と途方に暮れる可能性が少しだけ減って、使われてそうなところに当たりがつけられるようになるので、少し希望的になる。今回の例について言えばまだなんとかなったりする範疇なので、言いたいことの例としてあまり良いものではないんだけど、まあなんか言わんとしてることは伝わってほしいです。&lt;/p&gt;

&lt;h2&gt;既存の翻訳辞書との兼ね合い&lt;/h2&gt;

&lt;p&gt;他に気になるところとして、既存の翻訳辞書に新たにenum用の値を追加するときに、例えばこういう定義場所が離れるような感じにしたくないという気持ちが少しあった。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;ja:
  activerecord:
    attributes:
      user:
        name: 名前
  enums:
    user:
      status:
        active: 利用中
        inactive: 停止中
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これはかなり単純化された例なので、実際にはattributesのところに既存の項目が沢山並んでいて、実際にはenum用のデータはかなり遠く離れたところに置かれることになる感じ。&lt;/p&gt;

&lt;p&gt;まあそれでも賛否両論あると思っていて、既存の辞書内にenum用の値を上手く忍ばせているせいで、逆にこのgemを廃止してenum用のデータだけ取り除きたくなったときに「もはやenum用のものかどうか分からん状況になっとるやんけこいつセンスねえな」と思うケースもあるかも。&lt;/p&gt;

&lt;p&gt;普段Railsのコード読んでて勘の良い人なら実装読むと分かると思うけど、今回書いたやつはほぼActiveModel::Translationの仕様と実装に寄せて書いている。&lt;/p&gt;

&lt;p&gt;仕様についてどの辺が寄せられているかというと、(READMEには書いてないけど) 例えば全てのモデルについてのデフォルト値を書きたい場合は以下のように書けたりもするし、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;ja:
  attributes:
    status:
      active: 利用中
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;直接のクラス名について該当する翻訳が無かった場合は親クラスに遡ったりもするし、何も無かった場合は &lt;code&gt;String#humanize&lt;/code&gt; で代替の値が用意されたりするし、defaultオプションでその値を外から指定できたりもする。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>VSCodeで自動で補完候補を出すのを無効化した</title>
      <link rel="alternate" type="text/html" href="https://r7kamura.com/articles/2020-09-11-vscode-disable-suggestion"/>
      <id>tag:r7kamura.com,2019:/articles/2020-09-11-vscode-disable-suggestion</id>
      <published>2020-09-11T00:00:00+00:00</published>
      <updated>2020-09-23T22:39:45+00:00</updated>
      <content type="html">&lt;p&gt;VSCodeで文字を入力している最中に「もしかしてこれじゃない？」って補完候補をポップアップしてくれるやつがすごく鬱陶しいので、無効化した。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;{
  &quot;editor.suggestOnTriggerCharacters&quot;: false,
  &quot;editor.quickSuggestions&quot;: {
    &quot;other&quot;: false,
    &quot;comments&quot;: false,
    &quot;strings&quot;: false
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;検索すればすぐ出てくるけど、settings.json に上のような設定を追加しただけ。ちなみに能動的に補完候補を表示するには、Mac版だとデフォルトでは &lt;code&gt;Ctrl + Space&lt;/code&gt; で出せる。&lt;/p&gt;

&lt;p&gt;思えば前にAtomを利用していたときも無効化したし、その前のVimを使っていたときも無効化した気がする。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;そういえば、このサイトの記録を辿る限りでは、2020年3月にAtomからVSCodeに移行したらしい。移行してから半年が経ったことになる。Vimモードからの脱却も同時にやったので、離脱症状が出るかと思いきや、意外と難なく乗り切れて本当に良かったと思う。&lt;/p&gt;
</content>
    </entry>
  
</feed>
